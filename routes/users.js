const express = require('express');
const router = express.Router();
const User = require('../models/User');
const generateToken = require('../utils/generateToken');

// Middleware de autentica√ß√£o (deve ser o mesmo usado no adminMiddleware)
const adminMiddleware = require('../middleware/adminMiddleware');

// Registro
router.post('/register', async (req, res) => {
  const { nome, email, senha } = req.body;
  try {
    const user = await User.create({ nome, email, senha });
    const token = generateToken(user._id, user.role);
    
    // Remover dados sens√≠veis antes de retornar
    const { senha: _, refreshToken, ...userWithoutSensitiveData } = user.toObject();
    
    res.status(201).json({ 
      user: userWithoutSensitiveData, 
      token 
    });
  } catch (err) {
    console.error('Erro no registro:', err);
    res.status(400).json({ error: err.message });
  }
});

// Login
router.post('/login', async (req, res) => {
  try {
    const { email, senha } = req.body;
    
    console.log('üìß Tentativa de login para:', email);
    
    const user = await User.findOne({ email });
    if (!user || !(await user.validarSenha(senha))) {
      console.log('‚ùå Credenciais inv√°lidas para:', email);
      return res.status(401).json({ error: 'Credenciais inv√°lidas' });
    }
    
    const token = generateToken(user._id, user.role);
    
    // Remover dados sens√≠veis antes de retornar
    const { senha: _, refreshToken, ...userWithoutSensitiveData } = user.toObject();
    
    console.log('‚úÖ Login bem-sucedido:', {
      userId: user._id,
      email: user.email,
      role: user.role
    });
    
    res.json({ 
      user: userWithoutSensitiveData, 
      token 
    });
  } catch (err) {
    console.error('Erro no login:', err);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// Listar todos (apenas admin) - ROTA CORRIGIDA
router.get('/', adminMiddleware, async (req, res) => {
  try {
    console.log('üéØ ROTA GET /users ATIVADA');
    console.log('üìã Dados da requisi√ß√£o:', {
      userId: req.userId,
      userRole: req.userRole,
      userEmail: req.user?.email
    });
    
    // Verificar se o usu√°rio √© admin
    if (req.userRole !== 'admin') {
      console.log('‚ùå ACESSO NEGADO!');
      console.log('‚ùå Role encontrado:', req.userRole);
      console.log('‚ùå Tipo do role:', typeof req.userRole);
      console.log('‚ùå Role === "admin"?', req.userRole === 'admin');
      return res.status(403).json({ 
        error: 'Acesso restrito a administradores',
        debug: { userRole: req.userRole, expectedRole: 'admin' }
      });
    }
    
    console.log('‚úÖ Usu√°rio √© admin, buscando usu√°rios...');
    
    const users = await User.find().select('-senha -refreshToken');
    
    console.log(`‚úÖ Retornando ${users.length} usu√°rios`);
    res.json(users);
  } catch (err) {
    console.error('‚ùå Erro ao listar usu√°rios:', err);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// Promover usu√°rio a admin (apenas admin)
router.patch('/promote/:userId', adminMiddleware, async (req, res) => {
  try {
    console.log('‚¨ÜÔ∏è Tentativa de promo√ß√£o:', {
      adminId: req.userId,
      adminRole: req.userRole,
      targetUserId: req.params.userId
    });

    // Verificar se o usu√°rio logado √© admin
    if (req.userRole !== 'admin') {
      return res.status(403).json({ error: 'Acesso negado. Apenas admins podem promover usu√°rios.' });
    }

    const { userId } = req.params;

    // Verificar se o usu√°rio a ser promovido existe
    const userToPromote = await User.findById(userId);
    if (!userToPromote) {
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado.' });
    }

    // Verificar se o usu√°rio j√° √© admin
    if (userToPromote.role === 'admin') {
      return res.status(400).json({ error: 'Usu√°rio j√° √© administrador.' });
    }

    // Promover o usu√°rio a admin
    userToPromote.role = 'admin';
    await userToPromote.save();

    // Retornar o usu√°rio atualizado (sem a senha)
    const { senha, refreshToken, ...userWithoutSensitiveData } = userToPromote.toObject();

    console.log('‚úÖ Usu√°rio promovido:', userWithoutSensitiveData.email);

    res.json({ 
      message: 'Usu√°rio promovido a administrador com sucesso.',
      user: userWithoutSensitiveData 
    });

  } catch (err) {
    console.error('Erro ao promover usu√°rio:', err);
    res.status(500).json({ error: 'Erro interno do servidor.' });
  }
});

// Rebaixar admin para usu√°rio comum (apenas admin)
router.patch('/demote/:userId', adminMiddleware, async (req, res) => {
  try {
    console.log('‚¨áÔ∏è Tentativa de rebaixamento:', {
      adminId: req.userId,
      adminRole: req.userRole,
      targetUserId: req.params.userId
    });

    // Verificar se o usu√°rio logado √© admin
    if (req.userRole !== 'admin') {
      return res.status(403).json({ error: 'Acesso negado. Apenas admins podem rebaixar usu√°rios.' });
    }

    const { userId } = req.params;

    // Verificar se o usu√°rio a ser rebaixado existe
    const userToDemote = await User.findById(userId);
    if (!userToDemote) {
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado.' });
    }

    // Verificar se o usu√°rio n√£o √© admin
    if (userToDemote.role === 'user') {
      return res.status(400).json({ error: 'Usu√°rio j√° √© um usu√°rio comum.' });
    }

    // Verificar se n√£o est√° tentando rebaixar a si mesmo
    if (userId === req.userId.toString()) {
      return res.status(400).json({ error: 'Voc√™ n√£o pode rebaixar a si mesmo.' });
    }

    // Rebaixar o usu√°rio para user
    userToDemote.role = 'user';
    await userToDemote.save();

    // Retornar o usu√°rio atualizado (sem a senha)
    const { senha, refreshToken, ...userWithoutSensitiveData } = userToDemote.toObject();

    console.log('‚úÖ Usu√°rio rebaixado:', userWithoutSensitiveData.email);

    res.json({ 
      message: 'Usu√°rio rebaixado para usu√°rio comum com sucesso.',
      user: userWithoutSensitiveData 
    });

  } catch (err) {
    console.error('Erro ao rebaixar usu√°rio:', err);
    res.status(500).json({ error: 'Erro interno do servidor.' });
  }
});

module.exports = router;